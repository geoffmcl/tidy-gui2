<?xml version="1.0"?>
<config version="5.1.28">
 <option class="print">
  <name>indent-spaces</name>
  <type>Integer</type>
  <default>2</default>
  <example>0, 1, 2, ...</example>
  <description>This option specifies the number of spaces or tabs that Tidy uses to indent content when <code>indent</code> is enabled. <br/>Note that the default value for this option is dependent upon the value of <code>indent-with-tabs</code> (see also). </description>
  <seealso>indent</seealso>
 </option>
 <option class="print">
  <name>wrap</name>
  <type>Integer</type>
  <default>68</default>
  <example>0 (no wrapping), 1, 2, ...</example>
  <description>This option specifies the right margin Tidy uses for line wrapping. <br/>Tidy tries to wrap lines so that they do not exceed this length. <br/>Set <code>wrap</code> to <code>0</code>(zero) if you want to disable line wrapping. </description>
 </option>
 <option class="print">
  <name>tab-size</name>
  <type>Integer</type>
  <default>8</default>
  <example>0, 1, 2, ...</example>
  <description>This option specifies the number of columns that Tidy uses between successive tab stops. It is used to map tabs to spaces when reading the input. </description>
 </option>
 <option class="encoding">
  <name>char-encoding</name>
  <type>Encoding</type>
  <default>utf8</default>
  <example>raw, ascii, latin0, latin1, utf8, iso2022, mac, win1252, ibm858, utf16le, utf16be, utf16, big5, shiftjis</example>
  <description>This option specifies the character encoding Tidy uses for both the input and output. <br/>For <code>ascii</code> Tidy will accept Latin-1 (ISO-8859-1) character values, but will use entities for all characters whose value &gt;127. <br/>For <code>raw</code>, Tidy will output values above 127 without translating them into entities. <br/>For <code>latin1</code>, characters above 255 will be written as entities. <br/>For <code>utf8</code>, Tidy assumes that both input and output are encoded as UTF-8. <br/>You can use <code>iso2022</code> for files encoded using the ISO-2022 family of encodings e.g. ISO-2022-JP. <br/>For <code>mac</code> and <code>win1252</code>, Tidy will accept vendor specific character values, but will use entities for all characters whose value &gt;127. <br/>For unsupported encodings, use an external utility to convert to and from UTF-8. </description>
  <seealso>input-encoding</seealso>
  <seealso>output-encoding</seealso>
 </option>
 <option class="encoding">
  <name>input-encoding</name>
  <type>Encoding</type>
  <default>utf8</default>
  <example>raw, ascii, latin0, latin1, utf8, iso2022, mac, win1252, ibm858, utf16le, utf16be, utf16, big5, shiftjis</example>
  <description>This option specifies the character encoding Tidy uses for the input. See <code>char-encoding</code> for more info. </description>
  <seealso>char-encoding</seealso>
 </option>
 <option class="encoding">
  <name>output-encoding</name>
  <type>Encoding</type>
  <default>utf8</default>
  <example>raw, ascii, latin0, latin1, utf8, iso2022, mac, win1252, ibm858, utf16le, utf16be, utf16, big5, shiftjis</example>
  <description>This option specifies the character encoding Tidy uses for the output. <br/>Note that this may only be different from <code>input-encoding</code> for Latin encodings (<code>ascii</code>, <code>latin0</code>, <code>latin1</code>, <code>mac</code>, <code>win1252</code>, <code>ibm858</code>).<br/>See <code>char-encoding</code> for more information</description>
  <seealso>char-encoding</seealso>
 </option>
 <option class="encoding">
  <name>newline</name>
  <type>enum</type>
  <default><em>Platform dependent</em></default>
  <example>LF, CRLF, CR</example>
  <description>The default is appropriate to the current platform. <br/>Genrally CRLF on PC-DOS, Windows and OS/2; CR on Classic Mac OS; and LF everywhere else (Linux, Mac OS X, and Unix). </description>
 </option>
 <option class="markup">
  <name>doctype</name>
  <type>DocType</type>
  <default>auto</default>
  <example>html5, omit, auto, strict, transitional, user</example>
  <description>This option specifies the DOCTYPE declaration generated by Tidy. <br/>If set to <code>omit</code> the output won't contain a DOCTYPE declaration. Note this this also implies <code>numeric-entities</code> is set to <code>yes</code><br/>If set to <code>html5</code> the DOCTYPE is set to <code>&lt;!DOCTYPE html&gt;</code>.<br/>If set to <code>auto</code> (the default) Tidy will use an educated guess based upon the contents of the document.<br/>If set to <code>strict</code>, Tidy will set the DOCTYPE to the HTML4 or XHTML1 strict DTD.<br/>If set to <code>loose</code>, the DOCTYPE is set to the HTML4 or XHTML1 loose (transitional) DTD.<br/>Alternatively, you can supply a string for the formal public identifier (FPI).<br/>For example: <br/><code>doctype: "-//ACME//DTD HTML 3.14159//EN"</code><br/>If you specify the FPI for an XHTML document, Tidy will set the system identifier to an empty string. For an HTML document, Tidy adds a system identifier only if one was already present in order to preserve the processing mode of some browsers. Tidy leaves the DOCTYPE for generic XML documents unchanged. <br/>This option does not offer a validation of document conformance. </description>
 </option>
 <option class="markup">
  <name>repeated-attributes</name>
  <type>enum</type>
  <default>keep-last</default>
  <example>keep-first, keep-last</example>
  <description>This option specifies if Tidy should keep the first or last attribute, if an attribute is repeated, e.g. has two <code>align</code> attributes. </description>
  <seealso>join-classes</seealso>
  <seealso>join-styles</seealso>
 </option>
 <option class="markup">
  <name>alt-text</name>
  <type>String</type>
  <default />
  <example />
  <description>This option specifies the default <code>alt=</code> text Tidy uses for <code>&lt;img&gt;</code> attributes when the <code>alt=</code> attribute is missing. <br/>Use with care, as it is your responsibility to make your documents accessible to people who cannot see the images. </description>
 </option>
 <option class="misc">
  <name>slide-style</name>
  <type>String</type>
  <default />
  <example />
  <description>This option has no function and is deprecated. </description>
 </option>
 <option class="misc">
  <name>error-file</name>
  <type>String</type>
  <default />
  <example />
  <description>This option specifies the error file Tidy uses for errors and warnings. Normally errors and warnings are output to <code>stderr</code>. </description>
  <seealso>output-file</seealso>
 </option>
 <option class="misc">
  <name>output-file</name>
  <type>String</type>
  <default />
  <example />
  <description>This option specifies the output file Tidy uses for markup. Normally markup is written to <code>stdout</code>. </description>
  <seealso>error-file</seealso>
 </option>
 <option class="misc">
  <name>write-back</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should write back the tidied markup to the same file it read from. <br/>You are advised to keep copies of important files before tidying them, as on rare occasions the result may not be what you expect. </description>
 </option>
 <option class="print">
  <name>markup</name>
  <type>Boolean</type>
  <default>yes</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should generate a pretty printed version of the markup. Note that Tidy won't generate a pretty printed version if it finds significant errors (see <code>force-output</code>). </description>
 </option>
 <option class="diagnostics">
  <name>show-info</name>
  <type>Boolean</type>
  <default>yes</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should display info-level messages. </description>
 </option>
 <option class="diagnostics">
  <name>show-warnings</name>
  <type>Boolean</type>
  <default>yes</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should suppress warnings. This can be useful when a few errors are hidden in a flurry of warnings. </description>
 </option>
 <option class="misc">
  <name>quiet</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should output the summary of the numbers of errors and warnings, or the welcome or informational messages. </description>
 </option>
 <option class="print">
  <name>indent</name>
  <type>AutoBool</type>
  <default>no</default>
  <example>auto, y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should indent block-level tags. <br/>If set to <code>auto</code> Tidy will decide whether or not to indent the content of tags such as <code>&lt;title&gt;</code>, <code>&lt;h1&gt;</code>-<code>&lt;h6&gt;</code>, <code>&lt;li&gt;</code>, <code>&lt;td&gt;</code>, or <code>&lt;p&gt;</code> based on the content including a block-level element. <br/>Setting <code>indent</code> to <code>yes</code> can expose layout bugs in some browsers. <br/>Use the option <code>indent-spaces</code> to control the number of spaces or tabs output per level of indent, and <code>indent-with-tabs</code> to specify whether spaces or tabs are used. </description>
  <seealso>indent-spaces</seealso>
 </option>
 <option class="markup">
  <name>coerce-endtags</name>
  <type>Boolean</type>
  <default>yes</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should coerce a start tag into an end tag in cases where it looks like an end tag was probably intended; for example, given <br/><code>&lt;span&gt;foo &lt;b&gt;bar&lt;b&gt; baz&lt;/span&gt;</code> <br/>Tidy will output <br/><code>&lt;span&gt;foo &lt;b&gt;bar&lt;/b&gt; baz&lt;/span&gt;</code> </description>
 </option>
 <option class="markup">
  <name>omit-optional-tags</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should omit optional start tags and end tags when generating output. <br/>Setting this option causes all tags for the <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, and <code>&lt;body&gt;</code> elements to be omitted from output, as well as such end tags as <code>&lt;/p&gt;</code>, <code>&lt;/li&gt;</code>, <code>&lt;/dt&gt;</code>, <code>&lt;/dd&gt;</code>, <code>&lt;/option&gt;</code>, <code>&lt;/tr&gt;</code>, <code>&lt;/td&gt;</code>, and <code>&lt;/th&gt;</code>. <br/>This option is ignored for XML output. </description>
 </option>
 <option class="markup">
  <name>hide-endtags</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option is an alias for <code>omit-optional-tags</code>. </description>
 </option>
 <option class="markup">
  <name>input-xml</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should use the XML parser rather than the error correcting HTML parser. </description>
 </option>
 <option class="markup">
  <name>output-xml</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should pretty print output, writing it as well-formed XML. <br/>Any entities not defined in XML 1.0 will be written as numeric entities to allow them to be parsed by an XML parser. <br/>The original case of tags and attributes will be preserved, regardless of other options. </description>
 </option>
 <option class="markup">
  <name>output-xhtml</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should generate pretty printed output, writing it as extensible HTML. <br/>This option causes Tidy to set the DOCTYPE and default namespace as appropriate to XHTML, and will use the corrected value in output regardless of other sources. <br/>For XHTML, entities can be written as named or numeric entities according to the setting of <code>numeric-entities</code>. <br/>The original case of tags and attributes will be preserved, regardless of other options. </description>
 </option>
 <option class="markup">
  <name>output-html</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should generate pretty printed output, writing it as HTML. </description>
 </option>
 <option class="markup">
  <name>add-xml-decl</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should add the XML declaration when outputting XML or XHTML. <br/>Note that if the input already includes an <code>&lt;?xml ... ?&gt;</code> declaration then this option will be ignored. <br/>If the encoding for the output is different from <code>ascii</code>, one of the utf encodings or <code>raw</code>, the declaration is always added as required by the XML standard. </description>
  <seealso>char-encoding</seealso>
  <seealso>output-encoding</seealso>
 </option>
 <option class="markup">
  <name>uppercase-tags</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should output tag names in upper case. <br/>The default is <code>no</code> which results in lower case tag names, except for XML input where the original case is preserved. </description>
 </option>
 <option class="markup">
  <name>uppercase-attributes</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should output attribute names in upper case. <br/>The default is <code>no</code>, which results in lower case attribute names, except for XML input, where the original case is preserved. </description>
 </option>
 <option class="markup">
  <name>bare</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should strip Microsoft specific HTML from Word 2000 documents, and output spaces rather than non-breaking spaces where they exist in the input. </description>
 </option>
 <option class="markup">
  <name>clean</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should perform cleaning of some legacy presentational tags (currently <code>&lt;i&gt;</code>, <code>&lt;b&gt;</code>, <code>&lt;center&gt;</code> when enclosed within appropriate inline tags, and <code>&lt;font&gt;</code>). If set to <code>yes</code> then legacy tags will be replaced with CSS <code>&lt;style&gt;</code> tags and structural markup as appropriate. </description>
 </option>
 <option class="markup">
  <name>gdoc</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should enable specific behavior for cleaning up HTML exported from Google Docs. </description>
 </option>
 <option class="markup">
  <name>logical-emphasis</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should replace any occurrence of <code>&lt;i&gt;</code> with <code>&lt;em&gt;</code> and any occurrence of <code>&lt;b&gt;</code> with <code>&lt;strong&gt;</code>. Any attributes are preserved unchanged. <br/>This option can be set independently of the <code>clean</code> option. </description>
 </option>
 <option class="markup">
  <name>drop-proprietary-attributes</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should strip out proprietary attributes, such as Microsoft data binding attributes. </description>
 </option>
 <option class="markup">
  <name>drop-font-tags</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>Deprecated; <em>do not use</em>. This option is destructive to <code>&lt;font&gt;</code> tags, and it will be removed from future versions of Tidy. Use the <code>clean</code> option instead. <br/>If you do set this option despite the warning it will perform as <code>clean</code> except styles will be inline instead of put into a CSS class. <code>&lt;font&gt;</code> tags will be dropped completely and their styles will not be preserved. <br/>If both <code>clean</code> and this option are enabled, <code>&lt;font&gt;</code> tags will still be dropped completely, and other styles will be preserved in a CSS class instead of inline. <br/>See <code>clean</code> for more information. </description>
  <seealso>clean</seealso>
 </option>
 <option class="markup">
  <name>drop-empty-elements</name>
  <type>Boolean</type>
  <default>yes</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should discard empty elements. </description>
 </option>
 <option class="markup">
  <name>drop-empty-paras</name>
  <type>Boolean</type>
  <default>yes</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should discard empty paragraphs. </description>
 </option>
 <option class="markup">
  <name>fix-bad-comments</name>
  <type>Boolean</type>
  <default>yes</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should replace unexpected hyphens with <code>=</code> characters when it comes across adjacent hyphens. <br/>The default is <code>yes</code>. <br/>This option is provided for users of Cold Fusion which uses the comment syntax: <code>&lt;!--- ---&gt;</code>. </description>
 </option>
 <option class="print">
  <name>break-before-br</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should output a line break before each <code>&lt;br&gt;</code> element. </description>
 </option>
 <option class="print">
  <name>split</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option has no function and is deprecated. </description>
 </option>
 <option class="markup">
  <name>numeric-entities</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should output entities other than the built-in HTML entities (<code>&amp;amp;</code>, <code>&amp;lt;</code>, <code>&amp;gt;</code>, and <code>&amp;quot;</code>) in the numeric rather than the named entity form. <br/>Only entities compatible with the DOCTYPE declaration generated are used. <br/>Entities that can be represented in the output encoding are translated correspondingly. </description>
  <seealso>doctype</seealso>
  <seealso>preserve-entities</seealso>
 </option>
 <option class="markup">
  <name>quote-marks</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should output <code>&quot;</code> characters as <code>&amp;quot;</code> as is preferred by some editing environments. <br/>The apostrophe character <code>'</code> is written out as <code>&amp;#39;</code> since many web browsers don't yet support <code>&amp;apos;</code>. </description>
 </option>
 <option class="markup">
  <name>quote-nbsp</name>
  <type>Boolean</type>
  <default>yes</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should output non-breaking space characters as entities, rather than as the Unicode character value 160 (decimal). </description>
 </option>
 <option class="markup">
  <name>quote-ampersand</name>
  <type>Boolean</type>
  <default>yes</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should output unadorned <code>&amp;</code> characters as <code>&amp;amp;</code>. </description>
 </option>
 <option class="print">
  <name>wrap-attributes</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should line-wrap attribute values, meaning that if the value of an attribute causes a line to exceed the width specified by <code>wrap</code>, Tidy will add one or more line breaks to the value, causing it to be wrapped into multiple lines. <br/>Note that this option can be set independently of <code>wrap-script-literals</code>. By default Tidy replaces any newline or tab with a single space and replaces any sequences of whitespace with a single space. <br/>To force Tidy to preserve the original, literal values of all attributes, and ensure that whitespace characters within attribute values are passed through unchanged, set <code>literal-attributes</code> to <code>yes</code>. </description>
  <seealso>wrap-script-literals</seealso>
  <seealso>literal-attributes</seealso>
 </option>
 <option class="print">
  <name>wrap-script-literals</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should line wrap string literals that appear in script attributes. <br/>Tidy wraps long script string literals by inserting a backslash character before the line break. </description>
  <seealso>wrap-attributes</seealso>
 </option>
 <option class="print">
  <name>wrap-sections</name>
  <type>Boolean</type>
  <default>yes</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should line wrap text contained within <code>&lt;![ ... ]&gt;</code> section tags. </description>
 </option>
 <option class="print">
  <name>wrap-asp</name>
  <type>Boolean</type>
  <default>yes</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should line wrap text contained within ASP pseudo elements, which look like: <code>&lt;% ... %&gt;</code>. </description>
 </option>
 <option class="print">
  <name>wrap-jste</name>
  <type>Boolean</type>
  <default>yes</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should line wrap text contained within JSTE pseudo elements, which look like: <code>&lt;# ... #&gt;</code>. </description>
 </option>
 <option class="print">
  <name>wrap-php</name>
  <type>Boolean</type>
  <default>yes</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should line wrap text contained within PHP pseudo elements, which look like: <code>&lt;?php ... ?&gt;</code>. </description>
 </option>
 <option class="markup">
  <name>fix-backslash</name>
  <type>Boolean</type>
  <default>yes</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should replace backslash characters <code>\</code> in URLs with forward slashes <code>/</code>. </description>
 </option>
 <option class="print">
  <name>indent-attributes</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should begin each attribute on a new line. </description>
 </option>
 <option class="markup">
  <name>assume-xml-procins</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should change the parsing of processing instructions to require <code>?&gt;</code> as the terminator rather than <code>&gt;</code>. <br/>This option is automatically set if the input is in XML. </description>
 </option>
 <option class="markup">
  <name>add-xml-space</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should add <code>xml:space="preserve"</code> to elements such as <code>&lt;pre&gt;</code>, <code>&lt;style&gt;</code> and <code>&lt;script&gt;</code> when generating XML. <br/>This is needed if the whitespace in such elements is to be parsed appropriately without having access to the DTD. </description>
 </option>
 <option class="markup">
  <name>enclose-text</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should enclose any text it finds in the body element within a <code>&lt;p&gt;</code> element.<br/>This is useful when you want to take existing HTML and use it with a style sheet. </description>
 </option>
 <option class="markup">
  <name>enclose-block-text</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should insert a <code>&lt;p&gt;</code> element to enclose any text it finds in any element that allows mixed content for HTML transitional but not HTML strict. </description>
 </option>
 <option class="misc">
  <name>keep-time</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should keep the original modification time of files that Tidy modifies in place. <br/>Setting the option to <code>yes</code> allows you to tidy files without changing the file modification date, which may be useful with certain tools that use the modification date for things such as automatic server deployment.<br/>Note this feature is not supported on some platforms. </description>
 </option>
 <option class="markup">
  <name>word-2000</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should go to great pains to strip out all the surplus stuff Microsoft Word 2000 inserts when you save Word documents as "Web pages". It doesn't handle embedded images or VML. <br/>You should consider using Word's "Save As: Web Page, Filtered". </description>
 </option>
 <option class="misc">
  <name>tidy-mark</name>
  <type>Boolean</type>
  <default>yes</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should add a <code>meta</code> element to the document head to indicate that the document has been tidied. <br/>Tidy won't add a meta element if one is already present. </description>
 </option>
 <option class="misc">
  <name>gnu-emacs</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should change the format for reporting errors and warnings to a format that is more easily parsed by GNU Emacs. </description>
 </option>
 <option class="misc">
  <name>gnu-emacs-file</name>
  <type>String</type>
  <default />
  <example />
  <description>Used internally. </description>
 </option>
 <option class="markup">
  <name>literal-attributes</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies how Tidy deals with whitespace characters within attribute values. <br/>If the value is <code>no</code> Tidy normalizes attribute values by replacing any newline or tab with a single space, and further by replacing any contiguous whitespace with a single space. <br/>To force Tidy to preserve the original, literal values of all attributes and ensure that whitespace within attribute values is passed through unchanged, set this option to <code>yes</code>. </description>
 </option>
 <option class="markup">
  <name>show-body-only</name>
  <type>AutoBool</type>
  <default>no</default>
  <example>auto, y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should print only the contents of the body tag as an HTML fragment. <br/>If set to <code>auto</code>, this is performed only if the body tag has been inferred. <br/>Useful for incorporating existing whole pages as a portion of another page. <br/>This option has no effect if XML output is requested. </description>
 </option>
 <option class="markup">
  <name>fix-uri</name>
  <type>Boolean</type>
  <default>yes</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should check attribute values that carry URIs for illegal characters and if such are found, escape them as HTML4 recommends. </description>
 </option>
 <option class="markup">
  <name>lower-literals</name>
  <type>Boolean</type>
  <default>yes</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should convert the value of an attribute that takes a list of predefined values to lower case. <br/>This is required for XHTML documents. </description>
 </option>
 <option class="markup">
  <name>hide-comments</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should print out comments. </description>
 </option>
 <option class="markup">
  <name>indent-cdata</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should indent <code>&lt;![CDATA[]]&gt;</code> sections. </description>
 </option>
 <option class="misc">
  <name>force-output</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should produce output even if errors are encountered. <br/>Use this option with care; if Tidy reports an error, this means Tidy was not able to (or is not sure how to) fix the error, so the resulting output may not reflect your intention. </description>
 </option>
 <option class="diagnostics">
  <name>show-errors</name>
  <type>Integer</type>
  <default>6</default>
  <example>0, 1, 2, ...</example>
  <description>This option specifies the number Tidy uses to determine if further errors should be shown. If set to <code>0</code>, then no errors are shown. </description>
 </option>
 <option class="encoding">
  <name>ascii-chars</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>Can be used to modify behavior of the <code>clean</code> option when set to <code>yes</code>. <br/>If set to <code>yes</code> when <code>clean</code>, <code>&amp;emdash;</code>, <code>&amp;rdquo;</code>, and other named character entities are downgraded to their closest ASCII equivalents. </description>
  <seealso>clean</seealso>
 </option>
 <option class="markup">
  <name>join-classes</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should combine class names to generate a single, new class name if multiple class assignments are detected on an element. </description>
  <seealso>join-styles</seealso>
  <seealso>repeated-attributes</seealso>
 </option>
 <option class="markup">
  <name>join-styles</name>
  <type>Boolean</type>
  <default>yes</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should combine styles to generate a single, new style if multiple style values are detected on an element. </description>
  <seealso>join-classes</seealso>
  <seealso>repeated-attributes</seealso>
 </option>
 <option class="markup">
  <name>escape-cdata</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should convert <code>&lt;![CDATA[]]&gt;</code> sections to normal text. </description>
 </option>
 <option class="encoding">
  <name>language</name>
  <type>String</type>
  <default />
  <example />
  <description>Currently not used, but this option specifies the language Tidy would use if it were properly localized. For example: <code>en</code>. </description>
 </option>
 <option class="markup">
  <name>ncr</name>
  <type>Boolean</type>
  <default>yes</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should allow numeric character references. </description>
 </option>
 <option class="encoding">
  <name>output-bom</name>
  <type>AutoBool</type>
  <default>auto</default>
  <example>auto, y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should write a Unicode Byte Order Mark character (BOM; also known as Zero Width No-Break Space; has value of U+FEFF) to the beginning of the output, and only applies to UTF-8 and UTF-16 output encodings. <br/>If set to <code>auto</code> this option causes Tidy to write a BOM to the output only if a BOM was present at the beginning of the input. <br/>A BOM is always written for XML/XHTML output using UTF-16 output encodings. </description>
 </option>
 <option class="markup">
  <name>replace-color</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should replace numeric values in color attributes with HTML/XHTML color names where defined, e.g. replace <code>#ffffff</code> with <code>white</code>. </description>
 </option>
 <option class="markup">
  <name>css-prefix</name>
  <type>String</type>
  <default />
  <example />
  <description>This option specifies the prefix that Tidy uses for styles rules. <br/>By default, <code>c</code> will be used. </description>
 </option>
 <option class="markup">
  <name>new-inline-tags</name>
  <type>Tag names</type>
  <default />
  <example>tagX, tagY, ...</example>
  <description>This option specifies new non-empty inline tags. This option takes a space or comma separated list of tag names. <br/>Unless you declare new tags, Tidy will refuse to generate a tidied file if the input includes previously unknown tags. <br/>This option is ignored in XML mode. </description>
  <seealso>new-blocklevel-tags</seealso>
  <seealso>new-empty-tags</seealso>
  <seealso>new-pre-tags</seealso>
 </option>
 <option class="markup">
  <name>new-blocklevel-tags</name>
  <type>Tag names</type>
  <default />
  <example>tagX, tagY, ...</example>
  <description>This option specifies new block-level tags. This option takes a space or comma separated list of tag names. <br/>Unless you declare new tags, Tidy will refuse to generate a tidied file if the input includes previously unknown tags. <br/>Note you can't change the content model for elements such as <code>&lt;table&gt;</code>, <code>&lt;ul&gt;</code>, <code>&lt;ol&gt;</code> and <code>&lt;dl&gt;</code>. <br/>This option is ignored in XML mode. </description>
  <seealso>new-empty-tags</seealso>
  <seealso>new-inline-tags</seealso>
  <seealso>new-pre-tags</seealso>
 </option>
 <option class="markup">
  <name>new-empty-tags</name>
  <type>Tag names</type>
  <default />
  <example>tagX, tagY, ...</example>
  <description>This option specifies new empty inline tags. This option takes a space or comma separated list of tag names. <br/>Unless you declare new tags, Tidy will refuse to generate a tidied file if the input includes previously unknown tags. <br/>Remember to also declare empty tags as either inline or blocklevel. <br/>This option is ignored in XML mode. </description>
  <seealso>new-blocklevel-tags</seealso>
  <seealso>new-inline-tags</seealso>
  <seealso>new-pre-tags</seealso>
 </option>
 <option class="markup">
  <name>new-pre-tags</name>
  <type>Tag names</type>
  <default />
  <example>tagX, tagY, ...</example>
  <description>This option specifies new tags that are to be processed in exactly the same way as HTML's <code>&lt;pre&gt;</code> element. This option takes a space or comma separated list of tag names. <br/>Unless you declare new tags, Tidy will refuse to generate a tidied file if the input includes previously unknown tags. <br/>Note you cannot as yet add new CDATA elements. <br/>This option is ignored in XML mode. </description>
  <seealso>new-blocklevel-tags</seealso>
  <seealso>new-empty-tags</seealso>
  <seealso>new-inline-tags</seealso>
 </option>
 <option class="diagnostics">
  <name>accessibility-check</name>
  <type>enum</type>
  <default>0 (Tidy Classic)</default>
  <example>0 (Tidy Classic), 1 (Priority 1 Checks), 2 (Priority 2 Checks), 3 (Priority 3 Checks)</example>
  <description>This option specifies what level of accessibility checking, if any, that Tidy should perform. <br/>Level <code>0 (Tidy Classic)</code> is equivalent to Tidy Classic's accessibility checking. <br/>For more information on Tidy's accessibility checking, visit <a href="http://www.html-tidy.org/accessibility/"> Tidy's Accessibility Page</a>. </description>
 </option>
 <option class="print">
  <name>vertical-space</name>
  <type>AutoBool</type>
  <default>no</default>
  <example>auto, y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should add some extra empty lines for readability. <br/>The default is <code>no</code>. <br/>If set to <code>auto</code> Tidy will eliminate nearly all newline characters.</description>
 </option>
 <option class="print">
  <name>punctuation-wrap</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should line wrap after some Unicode or Chinese punctuation characters. </description>
 </option>
 <option class="markup">
  <name>merge-emphasis</name>
  <type>Boolean</type>
  <default>yes</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should merge nested <code>&lt;b&gt;</code> and <code>&lt;i&gt;</code> elements; for example, for the case <br/><code>&lt;b class="rtop-2"&gt;foo &lt;b class="r2-2"&gt;bar&lt;/b&gt; baz&lt;/b&gt;</code>, <br/>Tidy will output <code>&lt;b class="rtop-2"&gt;foo bar baz&lt;/b&gt;</code>. </description>
 </option>
 <option class="markup">
  <name>merge-divs</name>
  <type>AutoBool</type>
  <default>auto</default>
  <example>auto, y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option can be used to modify the behavior of <code>clean</code> when set to <code>yes</code>.<br/>This option specifies if Tidy should merge nested <code>&lt;div&gt;</code> such as <code>&lt;div&gt;&lt;div&gt;...&lt;/div&gt;&lt;/div&gt;</code>. <br/>If set to <code>auto</code> the attributes of the inner <code>&lt;div&gt;</code> are moved to the outer one. Nested <code>&lt;div&gt;</code> with <code>id</code> attributes are <em>not</em> merged. <br/>If set to <code>yes</code> the attributes of the inner <code>&lt;div&gt;</code> are discarded with the exception of <code>class</code> and <code>style</code>. </description>
  <seealso>clean</seealso>
  <seealso>merge-spans</seealso>
 </option>
 <option class="markup">
  <name>decorate-inferred-ul</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should decorate inferred <code>&lt;ul&gt;</code> elements with some CSS markup to avoid indentation to the right. </description>
 </option>
 <option class="markup">
  <name>preserve-entities</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should preserve well-formed entities as found in the input. </description>
 </option>
 <option class="print">
  <name>sort-attributes</name>
  <type>enum</type>
  <default>none</default>
  <example>none, alpha</example>
  <description>This option specifies that Tidy should sort attributes within an element using the specified sort algorithm. If set to <code>alpha</code>, the algorithm is an ascending alphabetic sort. </description>
 </option>
 <option class="markup">
  <name>merge-spans</name>
  <type>AutoBool</type>
  <default>auto</default>
  <example>auto, y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option can be used to modify the behavior of <code>clean</code> when set to <code>yes</code>.<br/>This option specifies if Tidy should merge nested <code>&lt;span&gt;</code> such as <code>&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;</code>. <br/>The algorithm is identical to the one used by <code>merge-divs</code>. </description>
  <seealso>clean</seealso>
  <seealso>merge-divs</seealso>
 </option>
 <option class="markup">
  <name>anchor-as-name</name>
  <type>Boolean</type>
  <default>yes</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option controls the deletion or addition of the <code>name</code> attribute in elements where it can serve as anchor. <br/>If set to <code>yes</code> a <code>name</code> attribute, if not already existing, is added along an existing <code>id</code> attribute if the DTD allows it. <br/>If set to <code>no</code> any existing name attribute is removed if an<code>id</code> attribute exists or has been added. </description>
 </option>
 <option class="print">
  <name>indent-with-tabs</name>
  <type>Boolean</type>
  <default>no</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies if Tidy should indent with tabs instead of spaces, assuming <code>indent</code> is <code>yes</code>. <br/>Set it to <code>yes</code> to indent using tabs instead of the default spaces. <br/>Use the option <code>indent-spaces</code> to control the number of tabs output per level of indent. Note that when <code>indent-with-tabs</code> is enabled the default value of <code>indent-spaces</code> is reset to <code>1</code>. <br/>Note <code>tab-size</code> controls converting input tabs to spaces. Set it to zero to retain input tabs. </description>
 </option>
 <option class="markup">
  <name>skip-nested</name>
  <type>Boolean</type>
  <default>yes</default>
  <example>y/n, yes/no, t/f, true/false, 1/0</example>
  <description>This option specifies that Tidy should skip nested tags when parsing script and style data. </description>
 </option>
</config>
